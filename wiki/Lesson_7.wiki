#summary Principles of Javascript, Node.js and CoffeScript
#labels Featured
#sidebar TOC

= Lesson 7 details =

== Agenda ==

 * Javascript basis
   * basic syntax
   
   * object-based model
     * prototypes, mixins, clones
     * multi-level prototypes hierarchies
     * extending Object, Array
   
   * closures 
     * emulating private methods with closures 
       
   * singleton pattern
   * module pattern 

   * Javascript in browser
     * jquery, underscore libraries

 * NodeJS 
   * motivation 
   * one-thread model explained
   * demos
     * simple chat server
       * dirty database, jade templating
     * advanced chat server
      * express application server
      * backbone model and view
      * socket.io
 
 * Coffescript
   * Concept of Coffescript
   * Coffescript in browse as "little language"
   * Coffescript in Node.js

== Preparation ==

  * _Browser_ - Firefox, Chrome
  * _node.js_ - download actual version from http://nodejs.org/
    * for Linux - compile source code and put binary `node` on your `PATH` 
    * for Windows - you can use Windows installer, however, it is recommended to use Linux version in virtualized environment (e.g., !VirtualBox/VMWare + Ubuntu)

  * Optional requirement: _npm_ - should be bundled with node.js or install it from http://npmjs.org/ 
    * Linux
      * Put `node` on your `PATH`
      * Execute `curl http://npmjs.org/install.sh | sh`
    * Windows
      * should be included in Node.js Windows distribution

== Homework ==

The assignment is to implement a simple _node.js_ based application which would allow a user to manage its TODOs lists. 

The application should permit 
  * adding/removing TODO lists
  * adding/removing TODOs in a selected list
  * editing existing TODOs
  * moving a TODO from one list to another list

  * the list and TODOs should be pesisted in database
  * user management is not required -i.e., all the user acessing the application can manipulate with TODOs

The application should use Javascript heavily on the client side to avoid a full refresh of the page - e.g., data manipulation (list of TODOs, TODOs lists, commiting a new TODO, removing old TODO) should be implemented via an AJAX/Comet call with corresponding rewrite of DOM tree of the current page (i.e., use _jquery_).

Optionaly, you can also try to deploy the application into Heroku cloud (see http://devcenter.heroku.com/articles/node-js).

== Links ==

 * _Node.js_ - http://nodejs.org/
 * _npm_ - http://npmjs.org/
 * _Javascript V8_ - http://code.google.com/p/v8/
 * _Coffescript_ - http://coffeescript.org/
 * _Browser of various JS libraries_ - http://microjs.com/

 * Guides
   * Node.js
     * http://www.nodebeginner.org/
     * http://nodeguide.com/
     * https://github.com/joyent/node/wiki/Resources
   * Javascript 
      * http://eloquentjavascript.net/
      * http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml
   * Coffeescript
     * http://autotelicum.github.com/Smooth-CoffeeScript/SmoothCoffeeScript.html

 * Varioues Javascript WTFs
    * http://wtfjs.com/
